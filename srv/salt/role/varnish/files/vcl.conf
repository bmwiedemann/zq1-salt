#
# This is an example VCL file for Varnish.
#
# It does not do anything by default, delegating control to the
# builtin VCL. The builtin VCL is called when there is no explicit
# return statement.
#
# See the VCL chapters in the Users Guide for a comprehensive documentation
# at https://www.varnish-cache.org/docs/.

# Marker to tell the VCL compiler that this VCL has been written with the
# 4.0 or 4.1 syntax.
vcl 4.1;

acl purge {
    "localhost";
    "127.0.0.1";
    "::1";
}

# Default backend definition. Set this to point to your content server.
backend default {
    .host = "2001:67c:2178:8::27";
    .port = "80";
    #.host = "127.0.0.1";
    #.port = "8080";
}

backend vm12 {
    .host = "vm12c.zq1.de";
    .port = "80";
}

backend certbot {
    .host = "127.0.0.1";
    .port = "8080";
}

sub vcl_recv {
    # Happens before we check if we have this in cache already.
    #
    # Typically you clean up the request here, removing cookies you don't need,
    # rewriting the request, etc.
    
    if (req.url ~ "^/test.txt") {
        set req.backend_hint = vm12;
        return(pipe);
    }
    if (req.url ~ "^/\.well-known/acme-challenge/") {
        set req.backend_hint = certbot;
        return(pipe);
    }
    if (req.http.host ~ "pool\.ntp\.org$") {
	# https://book.varnish-software.com/4.0/chapters/VCL_Subroutines.html
        set req.http.location = "https://www.ntppool.org/";
        return (synth(750, "Permanently moved"));
    }

    if (req.method == "PURGE") {
        if (!client.ip ~ purge) {
            return (synth(405, client.ip + " is not allowed to send PURGE requests."));
        }
        return (purge);
    }

    if (req.restarts == 0) {
        if (req.http.x-forwarded-for) {
            set req.http.x-forwarded-for = regsub ( req.http.x-forwarded-for, ", ::1", "");
            #set req.http.X-Forwarded-For = req.http.X-Forwarded-For;
        } else {
            set req.http.X-Forwarded-For = client.ip;
        }
    }
}

sub vcl_synth {
    if (resp.status == 750) {
        set resp.http.location = req.http.location;
        set resp.status = 301;
        return (deliver);
    }
}

sub vcl_backend_response {
    # Happens after we have read the response headers from the backend.
    #
    # Here you clean the response headers, removing silly Set-Cookie headers
    # and other mistakes your backend does.

    # set cache timeout
    
    set beresp.ttl = 10s;
    set beresp.grace = 5s; # ontop of ttl
    #set beresp.grace = 10m;
    set beresp.keep = 4w;
    If (bereq.url ~ "\.rpm$") {
         set beresp.ttl = 1h;
    }
    #If (bereq.url ~ "\.iso$") {
    #     set beresp.ttl = 1h;
    #}
    If (bereq.url ~ "/boot/") {
         set beresp.ttl = 1m;
    }
}

sub vcl_deliver {
    # Happens when we have all the pieces we need, and are about to send the
    # response to the client.
    #
    # You can do accounting or modifying the final object here.
}
